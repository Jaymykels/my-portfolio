cache:
  key: "${CI_BUILD_REF_NAME} node:8-alpine"
  paths:
    - node_modules/

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  image: node:8-alpine
  variables:
    NODE_ENV: "development"
  before_script:
    - apk add --update bash
    - apk add --update git && rm -rf /tmp/* /var/cache/apk/*
  script:
    - yarn
  artifacts:
    paths:
     - public/

test:
  stage: test
  image: node:8-alpine
  variables:
    NODE_ENV: "test"
  script:
    - yarn test

release:
  stage: release
  image: docker:latest
  only:
    - "master"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  before_script:
    - docker version
    - "docker info"
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"

deploy:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - "master"
  environment: production
  variables:
    DOCKER_CONTAINER_NAME: ${CI_PROJECT_NAME}
    DOCKER_IMAGE_TAG: "registry.gitlab.com/jaymykels69/my-portfolio:latest"
  services:
    - docker:dind
  before_script:
    ## Install ssh agent (so we can access the Digital Ocean Droplet) and run it.
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)

    ## Write the environment variable value to the agent store, create the ssh directory and give the right permissions to it.
    - echo "$DEPLOY_SERVER_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Make sure that ssh will trust the new host, instead of asking
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    ## Test that everything is setup correctly
    - ssh -T root@$DEPLOYMENT_SERVER_IP
  script:
    # Execute as follow:
    # ssh -t digital-ocean-server "docker cmd1; docker cmd2;
    ## Connect to the Digital Ocean droplet, stop/remove all running containers, pull latest image and execute it.
    - ssh -T root@$DEPLOYMENT_SERVER_IP "docker ps -q --filter \"name=${DOCKER_CONTAINER_NAME}\" | grep -q . && docker stop ${DOCKER_CONTAINER_NAME} && docker rm -fv ${DOCKER_CONTAINER_NAME} && docker rmi -f ${DOCKER_IMAGE_TAG}; docker run -d -p 80:80 --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG}"
  after_script:
    - "docker logout ${CI_REGISTRY}"